@rendermode InteractiveServer
@page "/test-api"
@inject IHttpClientFactory ClientFactory

<h3>API Test</h3>

@if (string.IsNullOrEmpty(ApiResponse))
{
    <p>Click the button to fetch data from the API.</p>
}
else
{
    <p><strong>Response:</strong> @ApiResponse</p>
}

<button @onclick="CallApi">Call API</button>

<p><strong>Debug Log:</strong> @DebugLog</p>

@code {
    private string ApiResponse = "Waiting for API response...";
    private string DebugLog = "Starting up...";

    private async Task CallApi()
    {
        DebugLog = "Button Clicked! Attempting API Call...";
        ApiResponse = DebugLog;
        StateHasChanged(); //Immediate UI Update

        Console.WriteLine("ðŸ“¡ Button Clicked! API Call Started...");

        try
        {
            var client = ClientFactory.CreateClient("VitaeVistaAPI"); // âœ… Use Named Client
            Console.WriteLine($"Using Base URL: {client.BaseAddress}");

            var response = await client.GetAsync("api/test");

            Console.WriteLine($"API Response Status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                ApiResponse = await response.Content.ReadAsStringAsync();
                DebugLog = $"Success: {ApiResponse}";
                Console.WriteLine($"API Response: {ApiResponse}");
            }
            else
            {
                ApiResponse = $"API Error: {response.StatusCode}";
                DebugLog = ApiResponse;
                Console.WriteLine($"API Call Failed with status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            ApiResponse = $"Exception: {ex.Message}";
            DebugLog = ApiResponse;
            Console.WriteLine($"API Call Failed: {ex.Message}");
        }

        StateHasChanged(); // Refresh UI
    }
}